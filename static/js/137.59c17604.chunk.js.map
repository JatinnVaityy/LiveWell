{"version":3,"file":"static/js/137.59c17604.chunk.js","mappings":"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","sources":["components/dashboard/SalesChart.js","components/dashboard/Feeds.js","views/Starter.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\n// Register Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\n// Set stable base values\r\nlet baseHeartRate = 80;  // Stable around 80 bpm\r\nlet baseTemperature = 37.0;  // Stable around 37.0°C\r\nlet baseSpO2 = 98;  // Stable around 98%\r\n\r\n// Function to generate very small variations\r\nconst getSlightVariation = (base, range) => {\r\n  return (base + (Math.random() * range - range / 2)).toFixed(1);\r\n};\r\n\r\nconst HealthChart = () => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      { label: \"Heart Rate (bpm)\", data: [], borderColor: \"#FF5733\", borderWidth: 2 },\r\n      { label: \"Temperature (°C)\", data: [], borderColor: \"#33C4FF\", borderWidth: 2 },\r\n      { label: \"SpO2 (%)\", data: [], borderColor: \"#28A745\", borderWidth: 2 },\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n    const updateChartData = () => {\r\n      setChartData((prevData) => {\r\n        const time = [...prevData.labels, new Date().toLocaleTimeString()].slice(-10);\r\n        \r\n        const heartRate = [\r\n          ...prevData.datasets[0].data,\r\n          parseFloat(getSlightVariation(baseHeartRate, 2)), // Very small fluctuation (±1 bpm)\r\n        ].slice(-10);\r\n\r\n        const temperature = [\r\n          ...prevData.datasets[1].data,\r\n          parseFloat(getSlightVariation(baseTemperature, 0.2)), // Minimal fluctuation (±0.1°C)\r\n        ].slice(-10);\r\n\r\n        const spo2 = [\r\n          ...prevData.datasets[2].data,\r\n          parseFloat(getSlightVariation(baseSpO2, 0.5)), // Tiny fluctuation (±0.25%)\r\n        ].slice(-10);\r\n\r\n        return {\r\n          labels: time,\r\n          datasets: [\r\n            { label: \"Heart Rate (bpm)\", data: heartRate, borderColor: \"#FF5733\", borderWidth: 2 },\r\n            { label: \"Temperature (°C)\", data: temperature, borderColor: \"#33C4FF\", borderWidth: 2 },\r\n            { label: \"SpO2 (%)\", data: spo2, borderColor: \"#28A745\", borderWidth: 2 },\r\n          ],\r\n        };\r\n      });\r\n    };\r\n\r\n    updateChartData();\r\n    const interval = setInterval(updateChartData, 300000); // Update every 5 minutes\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: { legend: { display: true } },\r\n    scales: {\r\n      x: { title: { display: true, text: \"Time\" } },\r\n      y: { title: { display: true, text: \"Values\" } },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Live Health Monitoring</h3>\r\n      <Line data={chartData} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Card, CardBody, CardTitle, Button, Spinner } from \"reactstrap\";\r\nimport { FaHeartbeat, FaTemperatureLow } from \"react-icons/fa\";\r\nimport { GiHealthPotion } from \"react-icons/gi\";\r\n\r\nconst rawData = [\r\n  [15.3, 98, 34],\r\n  [20.9, 59, 100],\r\n  [17, 77, 125],\r\n  [17.2, 84, 115],\r\n  [18.9, 58, 166],\r\n  [19.8, 92, 150],\r\n  [24.3, 100, 150],\r\n  [31.7, 93, 166],\r\n  [34.3, 100, 214],\r\n  [32.1, 99, 166],\r\n];\r\n\r\nconst getRandomValue = (value, range) => {\r\n  return (value + (Math.random() * range - range / 2)).toFixed(1);\r\n};\r\n\r\nconst Feeds = () => {\r\n  const [healthData, setHealthData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [showDownload, setShowDownload] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const updateHealthData = () => {\r\n      const randomIndex = Math.floor(Math.random() * rawData.length);\r\n      const heartRate = getRandomValue(rawData[randomIndex][0], 5);\r\n      const bodyTemp = getRandomValue(rawData[randomIndex][1], 3);\r\n      const spo2 = getRandomValue(rawData[randomIndex][2], 10);\r\n\r\n      setHealthData([\r\n        { name: \"Heart Rate\", value: `${heartRate} bpm` },\r\n        { name: \"Body Temperature\", value: `${bodyTemp}°C` },\r\n        { name: \"SpO2\", value: `${spo2}%` },\r\n      ]);\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    updateHealthData();\r\n    const interval = setInterval(updateHealthData, 300000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const generateInsights = () => {\r\n    setIsGenerating(true);\r\n    setShowDownload(false);\r\n\r\n    setTimeout(() => {\r\n      setIsGenerating(false);\r\n      setShowDownload(true);\r\n    }, 10000);\r\n  };\r\n\r\n  const downloadReport = () => {\r\n    const link = document.createElement(\"a\");\r\n    link.href = \"/health_report.pdf\";\r\n    link.download = \"health_report.pdf\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"border-0 shadow-sm\">\r\n      <CardBody>\r\n        <CardTitle tag=\"h5\" className=\"text-center mb-3 text-primary\">\r\n          Health Insights\r\n        </CardTitle>\r\n\r\n        <div className=\"text-center mt-3\">\r\n          <Button color=\"primary\" onClick={generateInsights} disabled={isGenerating}>\r\n            {isGenerating ? <Spinner size=\"sm\" /> : \"Generate Insight\"}\r\n          </Button>\r\n        </div>\r\n\r\n        {isGenerating && (\r\n          <div className=\"text-center mt-3\">\r\n            <Spinner color=\"primary\" />\r\n            <p>Generating insights...</p>\r\n          </div>\r\n        )}\r\n\r\n        {showDownload && (\r\n          <div className=\"text-center mt-3\">\r\n            <Button color=\"success\" onClick={downloadReport}>\r\n              Download Report\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Feeds;\r\n","import { Col, Row } from \"reactstrap\";\r\nimport SalesChart from \"../components/dashboard/SalesChart\";\r\nimport Feeds from \"../components/dashboard/Feeds\";\r\n\r\nconst Starter = () => {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm=\"6\" lg=\"6\" xl=\"7\" xxl=\"8\">\r\n          <SalesChart />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"6\" xl=\"5\" xxl=\"4\">\r\n          <Feeds />\r\n        </Col>\r\n      </Row>\r\n     \r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Starter;\r\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","getSlightVariation","base","range","Math","random","toFixed","HealthChart","chartData","setChartData","useState","labels","datasets","label","data","borderColor","borderWidth","useEffect","updateChartData","prevData","Date","toLocaleTimeString","slice","parseFloat","interval","setInterval","clearInterval","_jsxs","children","_jsx","Line","options","responsive","plugins","legend","display","scales","x","title","text","y","rawData","getRandomValue","value","Feeds","healthData","setHealthData","loading","setLoading","isGenerating","setIsGenerating","showDownload","setShowDownload","updateHealthData","randomIndex","floor","length","heartRate","bodyTemp","spo2","name","Card","className","CardBody","CardTitle","tag","Button","color","onClick","generateInsights","setTimeout","disabled","Spinner","size","downloadReport","link","document","createElement","href","download","body","appendChild","click","removeChild","Starter","Row","Col","sm","lg","xl","xxl","SalesChart"],"sourceRoot":""}