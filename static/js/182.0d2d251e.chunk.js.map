{"version":3,"file":"static/js/182.0d2d251e.chunk.js","mappings":"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","sources":["views/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { FaMicrophone } from \"react-icons/fa\";\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { text: \"Hello! How can I help you?\", sender: \"bot\" },\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const recognitionRef = useRef(null); // Persist recognition instance\r\n\r\n  // Check if SpeechRecognition is supported\r\n  useEffect(() => {\r\n    if (\"webkitSpeechRecognition\" in window || \"SpeechRecognition\" in window) {\r\n      recognitionRef.current = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n      recognitionRef.current.continuous = false;\r\n      recognitionRef.current.lang = \"en-US\";\r\n      recognitionRef.current.interimResults = false;\r\n\r\n      recognitionRef.current.onstart = () => {\r\n        setIsListening(true);\r\n      };\r\n\r\n      recognitionRef.current.onend = () => {\r\n        setIsListening(false);\r\n      };\r\n\r\n      recognitionRef.current.onresult = (event) => {\r\n        const transcript = event.results[0][0].transcript;\r\n        setInput(transcript);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const sendMessage = () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessages = [...messages, { text: input, sender: \"user\" }];\r\n    setMessages(newMessages);\r\n    setInput(\"\");\r\n    setTimeout(() => {\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { text: \"This is a fake bot response!\", sender: \"bot\" },\r\n      ]);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleMicClick = () => {\r\n    if (!recognitionRef.current) {\r\n      alert(\"Speech Recognition not supported in your browser.\");\r\n      return;\r\n    }\r\n\r\n    if (isListening) {\r\n      recognitionRef.current.stop();\r\n    } else {\r\n      recognitionRef.current.start();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={styles.chatContainer}>\r\n      <div style={styles.chatBox}>\r\n        {messages.map((msg, index) => (\r\n          <div\r\n            key={index}\r\n            style={{\r\n              ...styles.chatMessage,\r\n              backgroundColor: msg.sender === \"bot\" ? \"#e1e1e1\" : \"#007bff\",\r\n              color: msg.sender === \"bot\" ? \"black\" : \"white\",\r\n              alignSelf: msg.sender === \"bot\" ? \"flex-start\" : \"flex-end\",\r\n              textAlign: msg.sender === \"bot\" ? \"left\" : \"right\",\r\n            }}\r\n          >\r\n            <p>{msg.text}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div style={styles.chatInput}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\r\n          style={styles.input}\r\n        />\r\n        <button onClick={sendMessage} style={styles.button}>\r\n          Send\r\n        </button>\r\n        <FaMicrophone\r\n          onClick={handleMicClick}\r\n          style={{\r\n            ...styles.micIcon,\r\n            color: isListening ? \"red\" : \"#007bff\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  chatContainer: {\r\n    flex: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    background: \"#f4f4f4\",\r\n    height: \"100vh\",\r\n    padding: \"0\",\r\n  },\r\n  chatBox: {\r\n    flex: 1,\r\n    overflowY: \"auto\",\r\n    padding: \"20px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  chatMessage: {\r\n    padding: \"12px\",\r\n    margin: \"8px\",\r\n    borderRadius: \"15px\",\r\n    maxWidth: \"70%\",\r\n    fontSize: \"16px\",\r\n    wordWrap: \"break-word\",\r\n  },\r\n  chatInput: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: \"15px\",\r\n    background: \"white\",\r\n    borderTop: \"1px solid #ddd\",\r\n    position: \"sticky\",\r\n    bottom: 0,\r\n    width: \"100%\",\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    padding: \"12px\",\r\n    border: \"1px solid #ddd\",\r\n    borderRadius: \"8px\",\r\n    fontSize: \"16px\",\r\n    outline: \"none\",\r\n  },\r\n  button: {\r\n    background: \"#007bff\",\r\n    color: \"white\",\r\n    border: \"none\",\r\n    padding: \"10px 15px\",\r\n    cursor: \"pointer\",\r\n    marginLeft: \"10px\",\r\n    borderRadius: \"8px\",\r\n    fontSize: \"16px\",\r\n  },\r\n  micIcon: {\r\n    fontSize: \"24px\",\r\n    cursor: \"pointer\",\r\n    marginLeft: \"15px\",\r\n  },\r\n};\r\n\r\nexport default ChatBot;\r\n"],"names":["styles","chatContainer","flex","display","flexDirection","background","height","padding","chatBox","overflowY","backgroundColor","chatMessage","margin","borderRadius","maxWidth","fontSize","wordWrap","chatInput","alignItems","borderTop","position","bottom","width","input","border","outline","button","color","cursor","marginLeft","micIcon","ChatBot","messages","setMessages","useState","text","sender","setInput","isListening","setIsListening","recognitionRef","useRef","useEffect","window","current","SpeechRecognition","webkitSpeechRecognition","continuous","lang","interimResults","onstart","onend","onresult","event","transcript","results","sendMessage","trim","newMessages","setTimeout","prev","_jsxs","style","children","_jsx","map","msg","index","alignSelf","textAlign","type","placeholder","value","onChange","e","target","onKeyPress","key","onClick","FaMicrophone","handleMicClick","stop","start","alert"],"sourceRoot":""}