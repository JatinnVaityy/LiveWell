{"version":3,"file":"static/js/846.4d73c8af.chunk.js","mappings":"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","sources":["views/About.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FaTrash } from \"react-icons/fa\";\r\nimport pill from \"../assets/images/pill.jpg\";\r\n\r\nconst SmartPillReminder = () => {\r\n  const [pillName, setPillName] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [reminders, setReminders] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(\"reminders\")) || [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"reminders\", JSON.stringify(reminders));\r\n  }, [reminders]);\r\n\r\n  // Function to format phone number correctly\r\n  const formatPhoneNumber = (number) => {\r\n    return number.startsWith(\"+\") ? number : \"+91\" + number;\r\n  };\r\n\r\n  // Function to send reminders at the exact time\r\n  useEffect(() => {\r\n    const checkReminder = setInterval(async () => {\r\n      const now = new Date();\r\n      const currentTime = now.getHours().toString().padStart(2, \"0\") + \":\" + now.getMinutes().toString().padStart(2, \"0\");\r\n\r\n      reminders.forEach(async (reminder, index) => {\r\n        if (reminder.time === currentTime && !reminder.sent) {\r\n          try {\r\n            await axios.post(\"http://localhost:5000/api/sendReminder\", reminder);\r\n            alert(`Reminder sent for ${reminder.pillName} at ${reminder.time}`);\r\n\r\n            // Mark reminder as sent to avoid duplicate sending\r\n            const updatedReminders = reminders.map((r, i) =>\r\n              i === index ? { ...r, sent: true } : r\r\n            );\r\n            setReminders(updatedReminders);\r\n          } catch (error) {\r\n            console.error(\"Failed to send reminder:\", error);\r\n          }\r\n        }\r\n      });\r\n    }, 60000); // Check every minute\r\n\r\n    return () => clearInterval(checkReminder);\r\n  }, [reminders]);\r\n\r\n  // Function to add a new reminder\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const formattedNumber = formatPhoneNumber(phoneNumber);\r\n    const newReminder = { pillName, time, phoneNumber: formattedNumber, sent: false };\r\n    setReminders([...reminders, newReminder]);\r\n    setPillName(\"\");\r\n    setTime(\"\");\r\n    setPhoneNumber(\"\");\r\n  };\r\n\r\n \r\n  const removeReminder = (index) => {\r\n    const updatedReminders = reminders.filter((_, i) => i !== index);\r\n    setReminders(updatedReminders);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"main-container\">\r\n        <div className=\"image-container\">\r\n          <img src={pill} alt=\"Pill Reminder\" />\r\n        </div>\r\n\r\n        <div className=\"form-container\">\r\n          <h1 className=\"heading\">Smart Pill Reminder</h1>\r\n          <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Pill Name\" value={pillName} onChange={(e) => setPillName(e.target.value)} required />\r\n            <input type=\"time\" value={time} onChange={(e) => setTime(e.target.value)} required />\r\n            <input type=\"text\" placeholder=\"Phone Number\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} required />\r\n            <button type=\"submit\">Set Reminder</button>\r\n          </form>\r\n\r\n          <h3 className=\"sub-heading\">Upcoming Reminders</h3>\r\n          <div className=\"reminder-list\">\r\n            {reminders.map((reminder, index) => (\r\n              <div key={index} className=\"reminder-item\">\r\n                <span>\r\n                  <strong>{reminder.pillName}</strong> at {reminder.time} for {reminder.phoneNumber}\r\n                </span>\r\n                <FaTrash className=\"delete-icon\" onClick={() => removeReminder(index)} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <style>{`\r\n        .container {\r\n          width: 100%;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          padding: 20px;\r\n        }\r\n\r\n        .main-container {\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n          max-width: 1000px;\r\n          width: 100%;\r\n          overflow: hidden;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n  .main-container {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n\r\n  .image-container img {\r\n    max-width: 60%; /* Reduce image size on small screens */\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .image-container img {\r\n    max-width: 50%; /* Further reduce image size for very small screens */\r\n  }\r\n}\r\n        .image-container {\r\n          flex: 1;\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: center;\r\n          padding: 20px;\r\n        }\r\n\r\n        .image-container img {\r\n          width: 100%;\r\n          max-width: 380px;\r\n          border-radius: 10px;\r\n            mix-blend-mode: multiply;\r\n        }\r\n\r\n        .form-container {\r\n          flex: 1;\r\n          padding: 20px;\r\n          min-width: 300px;\r\n        }\r\n\r\n        .form-container input {\r\n          width: 100%;\r\n          padding: 10px;\r\n          margin: 5px 0;\r\n          border: 1px solid #ccc;\r\n          border-radius: 5px;\r\n          font-size: 16px;\r\n        }\r\n\r\n        .form-container button {\r\n          width: 100%;\r\n          padding: 10px;\r\n          margin-top: 10px;\r\n          background-color: #1890ff;\r\n          color: white;\r\n          border: none;\r\n          border-radius: 5px;\r\n          font-size: 16px;\r\n          cursor: pointer;\r\n          transition: background 0.3s ease;\r\n        }\r\n\r\n        .form-container button:hover {\r\n          background-color: #0073e6;\r\n        }\r\n\r\n        .reminder-list {\r\n          margin-top: 15px;\r\n          padding: 10px;\r\n          border: 1px solid #ddd;\r\n          border-radius: 5px;\r\n          background: #f9f9f9;\r\n        }\r\n\r\n        .reminder-item {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          padding: 8px;\r\n          margin: 5px 0;\r\n          border-bottom: 1px solid #ddd;\r\n        }\r\n\r\n        .reminder-item:last-child {\r\n          border-bottom: none;\r\n        }\r\n\r\n        .delete-icon {\r\n          color: red;\r\n          cursor: pointer;\r\n          transition: 0.3s ease;\r\n        }\r\n\r\n        .delete-icon:hover {\r\n          color: darkred;\r\n          transform: scale(1.2);\r\n        }\r\n\r\n        .heading {\r\n          text-align: center;\r\n          font-size: 25px;\r\n          font-weight:bold;\r\n          color: #1890ff;\r\n          margin-bottom: 15px;\r\n        }\r\n\r\n        .sub-heading {\r\n          margin-top: 15px;\r\n          font-size: 18px;\r\n          color: #1890ff;\r\n        }\r\n\r\n        /* Responsive Styling */\r\n        @media (max-width: 768px) {\r\n          .main-container {\r\n            flex-direction: column;\r\n            text-align: center;\r\n          }\r\n\r\n          .image-container img {\r\n            max-width: 80%;\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SmartPillReminder;\r\n"],"names":["SmartPillReminder","pillName","setPillName","useState","time","setTime","phoneNumber","setPhoneNumber","reminders","setReminders","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","checkReminder","setInterval","async","now","Date","currentTime","getHours","toString","padStart","getMinutes","forEach","reminder","index","sent","axios","post","alert","updatedReminders","map","r","i","error","console","clearInterval","_jsxs","className","children","_jsx","src","pill","alt","onSubmit","e","preventDefault","formattedNumber","number","startsWith","newReminder","type","placeholder","value","onChange","target","required","FaTrash","onClick","filter","_","removeReminder"],"sourceRoot":""}