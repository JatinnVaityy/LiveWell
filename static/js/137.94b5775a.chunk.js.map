{"version":3,"file":"static/js/137.94b5775a.chunk.js","mappings":"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","sources":["components/dashboard/SalesChart.js","components/dashboard/Feeds.js","views/Starter.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Card, CardBody, CardTitle, Spinner } from \"reactstrap\";\r\n\r\n// Register Chart.js components\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst HealthChart = () => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      { label: \"Heart Rate (bpm)\", data: [], borderColor: \"#FF6B6B\", backgroundColor: \"rgba(255, 107, 107, 0.2)\", borderWidth: 2 },\r\n      { label: \"Temperature (°C)\", data: [], borderColor: \"#1890FF\", backgroundColor: \"rgba(24, 144, 255, 0.2)\", borderWidth: 2 },\r\n      { label: \"SpO2 (%)\", data: [], borderColor: \"#28C76F\", backgroundColor: \"rgba(40, 199, 111, 0.2)\", borderWidth: 2 },\r\n    ],\r\n  });\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const intervalRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\"http://127.0.0.1:5000/health-data\");\r\n        const data = await response.json();\r\n\r\n        console.log(\"Fetched Health Data:\", data); // Log the fetched data\r\n\r\n        setChartData((prevData) => {\r\n          const time = [...prevData.labels, new Date().toLocaleTimeString()].slice(-10);\r\n\r\n          return {\r\n            labels: time,\r\n            datasets: [\r\n              {\r\n                label: \"Heart Rate (bpm)\",\r\n                data: [...prevData.datasets[0].data, data.heart_rate].slice(-10),\r\n                borderColor: \"#FF6B6B\",\r\n                backgroundColor: \"rgba(255, 107, 107, 0.2)\",\r\n                borderWidth: 2,\r\n              },\r\n              {\r\n                label: \"Temperature (°C)\",\r\n                data: [...prevData.datasets[1].data, data.temperature].slice(-10),\r\n                borderColor: \"#1890FF\",\r\n                backgroundColor: \"rgba(24, 144, 255, 0.2)\",\r\n                borderWidth: 2,\r\n              },\r\n              {\r\n                label: \"SpO2 (%)\",\r\n                data: [...prevData.datasets[2].data, data.spo2].slice(-10),\r\n                borderColor: \"#28C76F\",\r\n                backgroundColor: \"rgba(40, 199, 111, 0.2)\",\r\n                borderWidth: 2,\r\n              },\r\n            ],\r\n          };\r\n        });\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Error fetching health data:\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    intervalRef.current = setInterval(fetchData, 5000); // Fetch new data every 5 seconds\r\n\r\n    return () => {\r\n      if (intervalRef.current) clearInterval(intervalRef.current);\r\n    };\r\n  }, []);\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false, // Allows height to increase\r\n    plugins: { legend: { display: true, position: \"top\" } },\r\n    scales: {\r\n      x: { title: { display: true, text: \"Time\", color: \"#2C3E50\" } },\r\n      y: { title: { display: true, text: \"Values\", color: \"#2C3E50\" } },\r\n    },\r\n    elements: {\r\n      line: { tension: 0.3 }, // Smooth curves\r\n      point: { radius: 3 },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className=\"border-0 shadow p-4 rounded\"\r\n      style={{\r\n        background: \"#F4F6F9\", // Light background for a clean UI\r\n        borderColor: \"#1890FF\",\r\n        height: \"500px\",\r\n      }}\r\n    >\r\n      <CardBody\r\n        style={{\r\n          height: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <CardTitle\r\n          tag=\"h4\"\r\n          className=\"text-center mb-4\"\r\n          style={{ color: \"#1890FF\", fontWeight: \"bold\" }}\r\n        >\r\n          Live Health Monitoring \r\n        </CardTitle>\r\n\r\n        {loading ? (\r\n          <div className=\"text-center\">\r\n            <Spinner color=\"primary\" />\r\n            <p className=\"mt-2\" style={{ color: \"#2C3E50\" }}>Fetching latest health data...</p>\r\n          </div>\r\n        ) : (\r\n          <div style={{ flexGrow: 1, height: \"450px\" }}> {/* Increased chart height */}\r\n            <Line data={chartData} options={options} />\r\n          </div>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default HealthChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Card, CardBody, CardTitle, Button, Spinner } from \"reactstrap\";\r\nimport { FaHeartbeat, FaTemperatureLow } from \"react-icons/fa\";\r\nimport { GiHealthPotion } from \"react-icons/gi\";\r\n\r\nconst Feeds = () => {\r\n  const [healthData, setHealthData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [showDownload, setShowDownload] = useState(false);\r\n\r\n  const fetchHealthData = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:5000/health-data\");\r\n      const data = await response.json();\r\n\r\n      setHealthData([\r\n        { name: \"Heart Rate\", value: `${data.heart_rate} bpm`, icon: <FaHeartbeat size={28} color=\"#ff4d4f\" /> },\r\n        { name: \"Body Temperature\", value: `${data.temperature}°C`, icon: <FaTemperatureLow size={28} color=\"#1890ff\" /> },\r\n        { name: \"SpO2\", value: `${data.spo2}%`, icon: <GiHealthPotion size={28} color=\"#52c41a\" /> },\r\n      ]);\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching health data:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchHealthData();\r\n    const interval = setInterval(fetchHealthData, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const generateInsights = () => {\r\n    setIsGenerating(true);\r\n    setShowDownload(false);\r\n\r\n    setTimeout(() => {\r\n      setIsGenerating(false);\r\n      setShowDownload(true);\r\n    }, 10000);\r\n  };\r\n\r\n  const downloadReport = () => {\r\n    const link = document.createElement(\"a\");\r\n    link.href = \"/health_report.pdf\";\r\n    link.download = \"health_report.pdf\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"border-0 shadow p-4 rounded\" style={{ background: \"#f0f8ff\", borderColor: \"#1890ff\" }}>\r\n      <CardBody>\r\n        <CardTitle tag=\"h4\" className=\"text-center mb-4\" style={{ color: \"#1890ff\", fontWeight: \"bold\" }}>\r\n          Health Insights\r\n        </CardTitle>\r\n\r\n        {loading ? (\r\n          <div className=\"text-center\">\r\n            <Spinner color=\"primary\" />\r\n            <p className=\"mt-2\" style={{ color: \"#595959\" }}>Fetching latest health data...</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {healthData.map((item, index) => (\r\n              <Card key={index} className=\"d-flex flex-row align-items-center shadow-sm mb-3 p-3 border-0\" style={{ background: \"#ffffff\", borderRadius: \"12px\" }}>\r\n                <div className=\"me-3\">{item.icon}</div>\r\n                <div>\r\n                  <h6 style={{ color: \"#595959\", fontWeight: \"bold\" }}>{item.name}</h6>\r\n                  <p style={{ fontSize: \"16px\", color: \"#333\", margin: 0 }}>{item.value}</p>\r\n                </div>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"text-center mt-4\">\r\n          <Button color=\"primary\" onClick={generateInsights} disabled={isGenerating} style={{ background: \"#1890ff\", borderColor: \"#1890ff\" }}>\r\n            {isGenerating ? <Spinner size=\"sm\" /> : \"Generate Insights\"}\r\n          </Button>\r\n        </div>\r\n\r\n        {isGenerating && (\r\n          <div className=\"text-center mt-3\">\r\n            <Spinner color=\"primary\" />\r\n            <p className=\"mt-2\" style={{ color: \"#595959\" }}>Processing insights...</p>\r\n          </div>\r\n        )}\r\n\r\n        {showDownload && (\r\n          <div className=\"text-center mt-4\">\r\n            <Button color=\"success\" onClick={downloadReport} style={{ background: \"#52c41a\", borderColor: \"#52c41a\" }}>\r\n              Download Report\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Feeds;\r\n","import { Col, Row } from \"reactstrap\";\r\nimport SalesChart from \"../components/dashboard/SalesChart\";\r\nimport Feeds from \"../components/dashboard/Feeds\";\r\n\r\nconst Starter = () => {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm=\"6\" lg=\"6\" xl=\"7\" xxl=\"8\">\r\n          <SalesChart />\r\n        </Col>\r\n        <Col sm=\"6\" lg=\"6\" xl=\"5\" xxl=\"4\">\r\n          <Feeds />\r\n        </Col>\r\n      </Row>\r\n     \r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Starter;\r\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","HealthChart","chartData","setChartData","useState","labels","datasets","label","data","borderColor","backgroundColor","borderWidth","loading","setLoading","intervalRef","useRef","useEffect","fetchData","async","response","fetch","json","console","log","prevData","Date","toLocaleTimeString","slice","heart_rate","temperature","spo2","error","current","setInterval","clearInterval","_jsx","Card","className","style","background","height","children","_jsxs","CardBody","display","flexDirection","justifyContent","CardTitle","tag","color","fontWeight","Spinner","flexGrow","Line","options","responsive","maintainAspectRatio","plugins","legend","position","scales","x","title","text","y","elements","line","tension","point","radius","Feeds","healthData","setHealthData","isGenerating","setIsGenerating","showDownload","setShowDownload","fetchHealthData","name","value","icon","FaHeartbeat","size","FaTemperatureLow","GiHealthPotion","interval","map","item","index","borderRadius","fontSize","margin","Button","onClick","generateInsights","setTimeout","disabled","downloadReport","link","document","createElement","href","download","body","appendChild","click","removeChild","Starter","Row","Col","sm","lg","xl","xxl","SalesChart"],"sourceRoot":""}